name: WebdriverIO iOS Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ios-tests:
    name: Run WebdriverIO Tests on iOS Simulator
    runs-on: macos-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Detect iOS Simulator and Platform Version
      - name: Detect iOS Simulator
        id: simulator
        run: |
          device_name=$(xcrun simctl list devices available | grep 'iPhone' | head -1 | awk -F'[()]' '{print $1}' | awk '{$1=$1};1')
          platform_version=$(xcrun simctl list runtimes | grep -o 'iOS [0-9.]*' | head -1 | awk '{print $2}')
          echo "DEVICE_NAME=$device_name" >> $GITHUB_ENV
          echo "PLATFORM_VERSION=$platform_version" >> $GITHUB_ENV

      # Step 3: Install Node.js
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Step 4: Install Appium and XCUITest Driver
      - name: Install Appium and XCUITest Driver
        run: |
          npm install -g appium
          appium driver install xcuitest
          appium driver list --installed
          
      - name: Start iOS Simulator
        run: |
          UDID=$(xcrun simctl list devices available | grep 'iPhone' | head -1 | awk -F'[()]' '{print $2}')
          echo "Booting iOS Simulator with UDID: $UDID"
          xcrun simctl boot "$UDID"
          sleep 15 # Wait for the simulator to boot

      - name: Debug iOS Simulator Status
        run: xcrun simctl list
    
      # Step 5: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 6: Start Appium Server
      - name: Start Appium Server
        run: appium --log-level debug --port 4723 &
             npx wait-on tcp:4723

      # Step 7: Run WebdriverIO Tests
      - name: Run WebdriverIO Tests
        env:
          DEVICE_NAME: ${{ env.DEVICE_NAME }}
          PLATFORM_VERSION: ${{ env.PLATFORM_VERSION }}
        run: npx wdio run wdio.conf.ts

      # Step 8: Generate Allure Report
      - name: Generate Allure Report
        run: |
          npm install -g allure-commandline
          allure generate allure-results --clean -o allure-report

      # Step 9: Upload Allure Report
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
